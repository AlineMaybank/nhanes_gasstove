#a_01_NHANES_merging

# Set working directory
rm(list = ls())  # Clears all objects from the global environment

setwd("/Users/alinemaybank/Desktop/NHANES project")
getwd()

# Install required packages if not installed
install.packages("SASxport")
library(foreign)
install.packages("nhanesA")
library(nhanesA)
install.packages("dplyr")
library(dplyr)
 hellow

#Read in data for 2013-2014
VTQ_2013 <- read.xport("2013/VTQ_H 2013.xpt")
#3489   24
MCQ_2013 <- read.xport("2013/MCQ_H 2013.xpt")
#9770   95
DEMO_2013 <- read.xport("2013/DEMO_H.xpt")
#10175    47
HOQ_2013 <- read.xport("2013/HOQ_H 2013.xpt")
#10175     3
SMQSHS_2013 <- read.xport("2013/SMQSHS_H 2013.xpt")
#10175    14
SMQ_2013 <- read.xport("2013/SMQ_H 2013.xpt")
#7168   32
ECQ_2013 <- read.xport("2013/ECQ_H 2013.xpt")
#3711   10
BMX_2013 <- read.xport("2013/BMX_H 2013.xpt")
#9813   26

#Read in data for 2015-2016
VTQ_I_2015 <- read.xport("2015/VTQ_I 2015.xpt")
#3394   24
MCQ_I_2015 <- read.xport("2015/MCQ_I 2015.xpt")
#9575   90
DEMO_I_2015 <- read.xport("2015/DEMO_I 2015.xpt")
#9971   47
HOQ_I_2015 <- read.xport("2015/HOQ_I 2015.xpt")
#9971    3
SMQSHS_I_2015 <- read.xport("2015/SMQSHS_I 2015.xpt")
#9971   14
SMQ_I_2015 <- read.xport("2015/SMQ_I 2015.xpt")
#7001   42
ECQ_I_2015 <- read.xport("2015/ECQ_I 2015.xpt")
#3644   10
BMX_I_2015 <- read.xport("2015/BMX_I 2015.xpt")

#Read in data for 2017-2018
VTQ_2017 <- read.xport("2017/VTQ_J 2017.xpt")
#3172   23
MCQ_2017 <- read.xport("2017/MCQ_J 2017.xpt")
#8897   76
DEMO_2017 <- read.xport("2017/DEMO_J.2017xpt")
#9254   46
HOQ_2017 <- read.xport("2017/HOQ_J 2017.xpt")
#9254    3
SMQSHS_2017 <- read.xport("2017/SMQSHS_J 2017.xpt")
#9254   15
SMQ_2017 <- read.xport("2017/SMQ_J 2017.xpt")
#6724   37
ECQ_2017 <- read.xport("2017/ECQ_J 2017.xpt")
#3093   10
BMX_2017 <- read.xport("2017/BMX_J 2017.xpt")
#8704   21

#MERGE DATA
# Define merge function
merge_nhanes_cycle <- function(..., year_label) {
  datasets <- list(...)
  
  # Ensure all datasets contain SEQN
  datasets <- lapply(datasets, function(df) {
    if (!"SEQN" %in% colnames(df)) stop("SEQN missing in dataset")
    return(df)
  })
  
  # Merge all datasets by SEQN
  merged_cycle <- Reduce(function(x, y) merge(x, y, by = "SEQN", all = TRUE), datasets)
  
  # Add a YEAR column to track dataset origin
  merged_cycle$YEAR <- year_label
  
  return(merged_cycle)
}

# Merge each NHANES cycle separately
nhanes_2013_2014 <- merge_nhanes_cycle(VTQ_2013, MCQ_2013, DEMO_2013, HOQ_2013, 
                                       SMQSHS_2013, SMQ_2013, ECQ_2013, BMX_2013, 
                                       year_label = "2013-2014")

nhanes_2015_2016 <- merge_nhanes_cycle(VTQ_I_2015, MCQ_I_2015, DEMO_I_2015, HOQ_I_2015, 
                                       SMQSHS_I_2015, SMQ_I_2015, ECQ_I_2015, BMX_I_2015, 
                                       year_label = "2015-2016")

nhanes_2017_2018 <- merge_nhanes_cycle(VTQ_2017, MCQ_2017, DEMO_2017, HOQ_2017, 
                                       SMQSHS_2017, SMQ_2017, ECQ_2017, BMX_2017, 
                                       year_label = "2017-2018")

#Export merged yearly data files
write.csv(nhanes_2013_2014, "nhanes_2013_2014.csv", row.names = FALSE)
write.csv(nhanes_2015_2016, "nhanes_2015_2016.csv", row.names = FALSE)
write.csv(nhanes_2017_2018, "nhanes_2017_2018.csv", row.names = FALSE)

### **Step 3: Merge All Cycles Together**


# Ensure dplyr is loaded
# Load required libraries
library(dplyr)

# Set working directory (modify if necessary)
setwd("/Users/alinemaybank/Desktop/NHANES project")

# Read in NHANES datasets
nhanes_2013_2014 <- read.csv("nhanes_2013_2014.csv")
nhanes_2015_2016 <- read.csv("nhanes_2015_2016.csv")
nhanes_2017_2018 <- read.csv("nhanes_2017_2018.csv")

# Add a YEAR column to each dataset
nhanes_2013_2014$YEAR <- "2013-2014"
nhanes_2015_2016$YEAR <- "2015-2016"
nhanes_2017_2018$YEAR <- "2017-2018"

# Combine datasets using bind_rows() (stacking)
merged_nhanes_all <- bind_rows(nhanes_2013_2014, nhanes_2015_2016, nhanes_2017_2018)

# Verify structure
dim(merged_nhanes_all)  # Check rows and columns
observations= 29400 
rows= 312
length(unique(merged_nhanes_all$SEQN))  # Ensure most SEQN values are unique
observations=29400

colnames(merged_nhanes_all)  # View all column names
# [1] "SEQN"     "WTSVOC2Y" "VTQ210"   "VTQ220"   "VTQ200A"  "VTQ231A"  "VTQ241A"  "VTQ241B"  "VTQ244A"  "VTQ244B" 
#[11] "VTQ251A"  "VTQ251B"  "VTQ261A"  "VTQ261B"  "VTQ265A"  "VTQ265B"  "VTQ271A"  "VTQ271B"  "VTQ281A"  "VTQ281B" 
#[21] "VTQ281C"  "VTQ281D"  "VTQ281E"  "VTQ281F"  "MCQ010"   "MCQ025"   "MCQ035"   "MCQ040"   "MCQ050"   "AGQ030"  
#[31] "MCQ053"   "MCQ070"   "MCQ075"   "MCQ080"   "MCQ082"   "MCQ084"   "MCQ086"   "MCQ092"   "MCD093"   "MCQ149"  
#[41] "MCQ151"   "MCQ160A"  "MCQ180A"  "MCQ195"   "MCQ160N"  "MCQ180N"  "MCQ160B"  "MCQ180B"  "MCQ160C"  "MCQ180C" 
#[51] "MCQ160D"  "MCQ180D"  "MCQ160E"  "MCQ180E"  "MCQ160F"  "MCQ180F"  "MCQ160G"  "MCQ180G"  "MCQ160M"  "MCQ170M" 
#[61] "MCQ180M"  "MCQ160K"  "MCQ170K"  "MCQ180K"  "MCQ160L"  "MCQ170L"  "MCQ180L"  "MCQ160O"  "MCQ203"   "MCQ206"  
#[71] "MCQ220"   "MCQ230A"  "MCQ230B"  "MCQ230C"  "MCQ230D"  "MCQ240A"  "MCQ240AA" "MCQ240B"  "MCQ240BB" "MCQ240C" 
#[81] "MCQ240CC" "MCQ240D"  "MCQ240DD" "MCQ240DK" "MCQ240E"  "MCQ240F"  "MCQ240G"  "MCQ240H"  "MCQ240I"  "MCQ240J" 
#[91] "MCQ240K"  "MCQ240L"  "MCQ240M"  "MCQ240N"  "MCQ240O"  "MCQ240P"  "MCQ240Q"  "MCQ240R"  "MCQ240S"  "MCQ240T" 
#[101] "MCQ240U"  "MCQ240V"  "MCQ240W"  "MCQ240X"  "MCQ240Y"  "MCQ240Z"  "MCQ300A"  "MCQ300B"  "MCQ300C"  "MCQ365A" 
#[111] "MCQ365B"  "MCQ365C"  "MCQ365D"  "MCQ370A"  "MCQ370B"  "MCQ370C"  "MCQ370D"  "MCQ380"   "SDDSRVYR" "RIDSTATR"
#[121] "RIAGENDR" "RIDAGEYR" "RIDAGEMN" "RIDRETH1" "RIDRETH3" "RIDEXMON" "RIDEXAGM" "DMQMILIZ" "DMQADFC"  "DMDBORN4"
#[131] "DMDCITZN" "DMDYRSUS" "DMDEDUC3" "DMDEDUC2" "DMDMARTL" "RIDEXPRG" "SIALANG"  "SIAPROXY" "SIAINTRP" "FIALANG" 
#[141] "FIAPROXY" "FIAINTRP" "MIALANG"  "MIAPROXY" "MIAINTRP" "AIALANGA" "DMDHHSIZ" "DMDFMSIZ" "DMDHHSZA" "DMDHHSZB"
#[151] "DMDHHSZE" "DMDHRGND" "DMDHRAGE" "DMDHRBR4" "DMDHREDU" "DMDHRMAR" "DMDHSEDU" "WTINT2YR" "WTMEC2YR" "SDMVPSU" 
#[161] "SDMVSTRA" "INDHHIN2" "INDFMIN2" "INDFMPIR" "HOD050"   "HOQ065"   "SMD460"   "SMD470"   "SMD480"   "SMQ020"  
#[171] "SMD030"   "SMQ040"   "SMQ050Q"  "SMQ050U"  "SMD055"   "SMD057"   "SMQ078"   "SMD641"   "SMD650"   "SMD093"  
#[181] "SMDUPCA"  "SMD100BR" "SMD100FL" "SMD100MN" "SMD100LN" "SMD100TR" "SMD100NI" "SMD100CO" "SMQ621"   "SMD630"  
#[191] "SMQ661"   "SMQ665A"  "SMQ665B"  "SMQ665C"  "SMQ665D"  "SMQ670"   "SMQ848"   "SMQ852Q"  "SMQ852U"  "SMAQUEX2"
#[201] "ECD010"   "ECQ020"   "ECD070A"  "ECD070B"  "ECQ080"   "ECQ090"   "WHQ030E"  "MCQ080E"  "ECQ150"   "BMDSTATS"
#[211] "BMXWT"    "BMIWT"    "BMXRECUM" "BMIRECUM" "BMXHEAD"  "BMIHEAD"  "BMXHT"    "BMIHT"    "BMXBMI"   "BMDBMIC" 
#[221] "BMXLEG"   "BMILEG"   "BMXARML"  "BMIARML"  "BMXARMC"  "BMIARMC"  "BMXWAIST" "BMIWAIST" "BMXSAD1"  "BMXSAD2" 
#[231] "BMXSAD3"  "BMXSAD4"  "BMDAVSAD" "BMDSADCM" "YEAR"     "VTQ233A"  "VTQ233B"  "VTD241B"  "VTD244B"  "VTD251B" 
#[241] "VTD261B"  "VTD271B"  "VTD281B"  "VTD281D"  "VTD281F"  "OSQ230"   "SMQ856"   "SMQ858"   "SMQ860"   "SMQ862"  
#[251] "SMQ866"   "SMQ868"   "SMQ870"   "SMQ872"   "SMQ874"   "SMQ876"   "SMQ878"   "SMQ880"   "SMAQUEX"  "SMQ925"  
#[261] "SMQ930"   "SMQ935"   "SMQ080"   "SMQ890"   "SMQ895"   "SMQ900"   "SMQ905"   "SMQ910"   "SMQ915"   "RHD018"  
#[271] "MCD180A"  "MCD180N"  "MCD180B"  "MCD180C"  "MCD180D"  "MCD180E"  "MCD180F"  "MCD180M"  "MCD180G"  "MCD180K" 
#[281] "MCD180L"  "MCQ500"   "MCQ510A"  "MCQ510B"  "MCQ510C"  "MCQ510D"  "MCQ510E"  "MCQ510F"  "MCQ520"   "MCQ530"  
#[291] "MCQ540"   "MCQ550"   "MCQ560"   "MCQ570"   "MCD240A"  "MCD240B"  "MCD240C"  "MCQ366A"  "MCQ366B"  "MCQ366C" 
#[301] "MCQ366D"  "MCQ371A"  "MCQ371B"  "MCQ371C"  "MCQ371D"  "DMDHRAGZ" "DMDHREDZ" "DMDHRMAZ" "DMDHSEDZ" "SMQ940"  
#[311] "BMXHIP"   "BMIHIP"

#View extra columns in 2015-2016
setdiff(names(nhanes_2015_2016), names(nhanes_2013_2014))
# [1] "VTQ233A" "VTQ233B" "VTD241B" "VTD244B" "VTD251B" "VTD261B" "VTD271B" "VTD281B" "VTD281D" "VTD281F" "OSQ230" 
#[12] "SMQ856"  "SMQ858"  "SMQ860"  "SMQ862"  "SMQ866"  "SMQ868"  "SMQ870"  "SMQ872"  "SMQ874"  "SMQ876"  "SMQ878" 
#[23] "SMQ880"  "SMAQUEX" "SMQ925"  "SMQ930"  "SMQ935"  "SMQ080"  "SMQ890"  "SMQ895"  "SMQ900"  "SMQ905"  "SMQ910" 
#[34] "SMQ915" 

#View extra columns in 2017-2018
setdiff(names(nhanes_2017_2018), names(nhanes_2015_2016))  
#[1] "RHD018"   "MCD180A"  "MCD180N"  "MCD180B"  "MCD180C"  "MCD180D"  "MCD180E"  "MCD180F"  "MCD180M"  "MCD180G" 
#[11] "MCD180K"  "MCD180L"  "MCQ500"   "MCQ510A"  "MCQ510B"  "MCQ510C"  "MCQ510D"  "MCQ510E"  "MCQ510F"  "MCQ520"  
#[21] "MCQ530"   "MCQ540"   "MCQ550"   "MCQ560"   "MCQ570"   "MCD240A"  "MCD240B"  "MCD240C"  "MCQ366A"  "MCQ366B" 
#[31] "MCQ366C"  "MCQ366D"  "MCQ371A"  "MCQ371B"  "MCQ371C"  "MCQ371D"  "DMDHRAGZ" "DMDHREDZ" "DMDHRMAZ" "DMDHSEDZ"
#[41] "SMQ940"   "BMXHIP"   "BMIHIP"

#Check to see if any SEQN are repeated
# Count how many times each SEQN appears across all cycles
all_seqn <- c(nhanes_2013_2014$SEQN, nhanes_2015_2016$SEQN, nhanes_2017_2018$SEQN)
duplicated_seqn <- all_seqn[duplicated(all_seqn)]  # Identify SEQNs that appear more than once

# Print unique SEQNs that appear in more than one dataset
unique(duplicated_seqn)
numeric(0)
#There are no repeated SEQN throughout the datasets

#Double-check that the Year column exists in the final merged dataset
"YEAR" %in% colnames(merged_nhanes_all)  # Should return TRUE if the column exists
#True - it exists

# Save the merged dataset
write.csv(merged_nhanes_all, "merged_nhanes_all.csv", row.names = FALSE)
